{
  "cp_wacky_snippet": {
    "prefix": "cpt",
    "body": [
        "#include \"bits/stdc++.h\"",
        "using namespace std;",
        "",
        "#define int int64_t",
        "#define endl '\\n'",
        "#define all(x) x.begin(), x.end()",
        "#define sz(x)  (int)x.size()",
        "",
        "const int mod = 1e9 + 7, INF = 1e18L + 5, N = 2e5 + 5;",
        "const string yes = \"YES\", no = \"NO\";",
        "namespace debug{",
        "    template <typename A, typename B>ostream &operator<<(ostream &os, const pair<A, B> &p){return os << '(' << p.first << \", \" << p.second << ')';}",
        "    template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>ostream &operator<<(ostream &os, const T_container &v){    os << '{';string sep;for (const T &x : v)os << sep << x, sep = \", \";return os << '}';}",
        "    void dbg_out() { cerr << endl; }",
        "    template <typename Head, typename... Tail>",
        "    void dbg_out(Head H, Tail... T){cerr << ' ' << H; dbg_out(T...);}",
        "} // namespace debug",
        "using namespace debug;",
        "",
        "void scan() {} template <typename Head, typename ...Tail> void scan(Head &H, Tail &...T) { cin >> H; scan(T...); }",
        "void print() { cout << \"\\n\"; } template <typename Head> void print(const Head &H) { cout << H << \"\\n\"; } template <typename Head, typename ...Tail> void print(const Head &H, const Tail &...T) { cout << H << \" \"; print(T...); }",
        "#define ini(_n)  int _n;cin>>_n;",
        "#define sni(_s)  string _s;cin>>_s;",
        "#define input(vec,s,n) vector<int> vec(s+n);for(int i=s;i<s+n;i++){cin>>vec[i];}",
        "#define output(vec,s,n)  for(int i=s;i<s+n;i++){ cout<<vec[i]<<\" \";} cout<<endl",
        "#define lb(c, x) distance((c).begin(), lower_bound(all(c), (x)))",
        "#define ub(c, x) distance((c).begin(), upper_bound(all(c), (x)))",
        "template <typename T> using vv = vector<vector<T>>;",
        "template <typename T> using mxpq = priority_queue<T>;",
        "template <typename T> using mnpq = priority_queue<T, vector<T>, greater<T>>;",
        "#define setbits(x)  __builtin_popcountll(x) // returns number of 1-bits of x",
        "#define trailing0(x) __builtin_ctzll(x) //returns num of trailing 0-bits of x",
        "#define leading0(x) __builtin_clzll(x) //returns num of leading 0-bits of x",
        "#define firstbitpos(x) __builtin_ffsll(x) //returns 1 + indexOf(least significant 1-bit)",
        "#define binary(n) bitset<32>(n)",
        "#define seal(n,m) (n%m!=0)?(n/m+1):(n/m)",
        "",
        "void extendgcd(int a, int b, int *v){if (b == 0){v[0] = 1; v[1] = 0;v[2] = a;return;}extendgcd(b, a % b, v);int x = v[1];v[1] = v[0] - v[1] * (a / b);v[0] = x;return;}",
        "int mminv(int a, int b){int arr[3];extendgcd(a, b, arr);return (arr[0]%b+b)%b;} // if b is prime just do mpow(a,b-2,b)",
        "template <class T> vector<T> divisor(T x){ vector<T> ans; for (T i = 1; i * i <= x; i++) if (x % i == 0) { ans.push_back(i); if (i * i != x) ans.push_back(x / i);}return ans;}",
        "",
        "#ifndef ONLINE_JUDGE",
        "#define dbg(...) cerr << \"\\033[0;33m\" << __func__ << \" : \" << __LINE__ << \" \" << \"(\" << #__VA_ARGS__ << \") : \",dbg_out(__VA_ARGS__),cerr << \"\\033[0m\";",
        "#else",
        "#define dbg(...) 2529;",
        "#endif",
        "",
        "typedef vector<int> vi;",
        "typedef pair<int,int> pi;",
        "void solve()",
        "{",
        "    $0",
        "}",
        "",
        "signed main()",
        "{",
        "    ios_base::sync_with_stdio(false);",
        "    cin.tie(nullptr);",
        "#ifdef Sieve",
        "    Eratosthenes(N);",
        "#endif",
        "#ifdef NCR",
        "    gen_factorial(N);",
        "#endif",
        "    int T= 1;",
        "    ${1:cin >> T};",
        "    for (int test = 1; test <= T; ++test)",
        "    {",
        "        ${2://cout<<\"Case #\"<<test<<\": \"};",
        "        solve();",
        "    }",
        "    return 0;",
        "}"
    ],
    "description": "cp_wacky_snippet"
  }
}
